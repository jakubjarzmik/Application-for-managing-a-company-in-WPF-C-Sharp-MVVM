<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:vm="clr-namespace:Firma.ViewModels"
                    xmlns:vw="clr-namespace:Firma.Views"
                    >

    <!--tu bedziemy laczyc View z ViewModel zakładek-->

    <DataTemplate DataType="{x:Type vm:NowyTowarViewModel}">
        <vw:NowyTowarView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:NowaFakturaViewModel}">
        <vw:NowaFakturaView/>
    </DataTemplate>
    
    <DataTemplate DataType="{x:Type vm:NowyKontrahentViewModel}">
        <vw:NowyKontrahentView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:PrzyjecieZewnetrzneViewModel}">
        <vw:PrzyjecieZewnetrzneView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:WydanieZewnetrzneViewModel}">
        <vw:WydanieZewnetrzneView/>
    </DataTemplate>
    
    <DataTemplate DataType="{x:Type vm:FakturyKategorieViewModel}">
        <vw:FakturyKategorieView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:NowaKategoriaFakturyViewModel}">
        <vw:NowaKategoriaFakturyView/>
    </DataTemplate>
    
    <DataTemplate DataType="{x:Type vm:FakturyRodzajeViewModel}">
        <vw:FakturyRodzajeView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:NowyRodzajFakturyViewModel}">
        <vw:NowyRodzajFakturyView/>
    </DataTemplate>
    
    <DataTemplate DataType="{x:Type vm:KontrahenciRodzajeViewModel}">
        <vw:KontrahenciRodzajeView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:NowyRodzajKontrahentaViewModel}">
        <vw:NowyRodzajKontrahentaView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:MagazynyTypyViewModel}">
        <vw:MagazynyTypyView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:NowyTypMagazynuViewModel}">
        <vw:NowyTypMagazynuView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:RodzajePlatnosciViewModel}">
        <vw:RodzajePlatnosciView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:NowyRodzajPlatnosciViewModel}">
        <vw:NowyRodzajPlatnosciView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:TowaryGrupyViewModel}">
        <vw:TowaryGrupyView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:NowaGrupaTowarowViewModel}">
        <vw:NowaGrupaTowarowView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:JednostkiMiaryViewModel}">
        <vw:JednostkiMiaryView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:NowaJednostkaMiaryViewModel}">
        <vw:NowaJednostkaMiaryView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:TowaryTypyViewModel}">
        <vw:TowaryTypyView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:NowyTypTowarowViewModel}">
        <vw:NowyTypTowarowView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:UmowyRodzajeViewModel}">
        <vw:UmowyRodzajeView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:NowyRodzajUmowyViewModel}">
        <vw:NowyRodzajUmowyView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:UmowyStanowiskaViewModel}">
        <vw:UmowyStanowiskaView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:NoweStanowiskoViewModel}">
        <vw:NoweStanowiskoView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:KrajeViewModel}">
        <vw:KrajeView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:NowyKrajViewModel}">
        <vw:NowyKrajView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:KontaktyViewModel}">
        <vw:KontaktyView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:NowyKontaktViewModel}">
        <vw:NowyKontaktView/>
    </DataTemplate>
    
    <DataTemplate DataType="{x:Type vm:FakturyViewModel}">
        <vw:FakturyView/>
    </DataTemplate>
    
    <DataTemplate DataType="{x:Type vm:AdresyViewModel}">
        <vw:AdresyView/>
    </DataTemplate>
    
    <DataTemplate DataType="{x:Type vm:NowyAdresViewModel}">
        <vw:NowyAdresView/>
    </DataTemplate>
    
    <DataTemplate DataType="{x:Type vm:KontrahenciViewModel}">
        <vw:KontrahenciView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:MagazynyViewModel}">
        <vw:MagazynyView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:PozycjePrzyjeciaZewnetrznegoViewModel}">
        <vw:PozycjePrzyjeciaZewnetrznegoView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:PozycjeWydaniaZewnetrznegoViewModel}">
        <vw:PozycjeWydaniaZewnetrznegoView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:PracownicyViewModel}">
        <vw:PracownicyView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:PrzyjeciaZewnetrzneViewModel}">
        <vw:PrzyjeciaZewnetrzneView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:WydaniaZewnetrzneViewModel}">
        <vw:WydaniaZewnetrzneView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:TowaryViewModel}">
        <vw:TowaryView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:TowaryStawkiVatViewModel}">
        <vw:TowaryStawkiVatView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:NowaStawkaVatTowarowViewModel}">
        <vw:NowaStawkaVatTowarowView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:UmowyViewModel}">
        <vw:UmowyView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:NowaUmowaViewModel}">
        <vw:NowaUmowaView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:ZmianyCenyViewModel}">
        <vw:ZmianyCenyView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:NowaZmianaCenyViewModel}">
        <vw:NowaZmianaCenyView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:SrednieWynagrodzenieViewModel}">
        <vw:SrednieWynagrodzenieView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:RaportSprzedazyViewModel}">
        <vw:RaportSprzedazyView/>
    </DataTemplate>

    <!--tu jest koniec laczenia View z ViewModel zakładek-->

    <Style x:Key="MainHCCStyle" TargetType="{x:Type HeaderedContentControl}">
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="IsTabStop" Value="False" />
        <!--<Setter Property="HorizontalAlignment" Value="Left"/>-->
        <Setter Property="Template">
            <Setter.Value>
                <!-- 
        This template ensures that content of a HeaderedContentControl 
        fills the available vertical space. 
        -->
                <ControlTemplate TargetType="{x:Type HeaderedContentControl}">
                    <DockPanel>
                        <ContentPresenter 
              DockPanel.Dock="Top"
              ContentSource="Header" 
              ContentTemplate="{TemplateBinding HeaderTemplate}" 
              />
                        <ContentPresenter 
              ContentSource="Content" 
              ContentTemplate="{TemplateBinding ContentTemplate}" 
              />
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
  This style ensures that the borders in the main window are consistent.
  -->
    <Style x:Key="MainBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="WhiteSmoke" />
        <Setter Property="BorderBrush" Value="#efefef" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="CornerRadius" Value="5" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
    </Style>

 
    <Style x:Key="ExpandMenuButton" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="#242424"/>
        <Setter Property="BorderThickness" Value="0"/>
    </Style>
    
    <Style x:Key="NewMenuButton" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="#efefef"/>
        <Setter Property="Background" Value="#1c1c1c"/>
        <Setter Property="Margin" Value="4,4,4,4"/>
        <Setter Property="Padding" Value="5, 5, 5, 5"/>
        <Setter Property="FontSize" Value="13"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" Style="{StaticResource MainBorderStyle}">
                        <ContentPresenter HorizontalAlignment="Left" VerticalAlignment="Top" Margin="{TemplateBinding Padding}"/>
                    </Border>                    
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#efefef"/>
                <Setter Property="Foreground" Value="Black"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <DataTemplate x:Key="CommandsTemplate">
        <ScrollViewer>
        <ItemsControl IsTabStop="False" ItemsSource="{Binding}" Margin="0,0,0,0" Padding="5" Background="#242424">
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <Button Style="{StaticResource NewMenuButton}" Command="{Binding Path=Command}">
                        <Button.Content>
                            <StackPanel Orientation="Horizontal">
                                <Image>
                                    <Image.Style>
                                        <Style TargetType="{x:Type Image}">
                                            <Setter Property="Source" Value="{Binding IconUrl}"/>
                                            <Setter Property="Width" Value="25"/>
                                            <Setter Property="Margin" Value="5, 0, 10, 0"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Button, AncestorLevel=1}, Path=IsMouseOver}" Value="True">
                                                    <Setter Property="Source" Value="{Binding IconHoverUrl}"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Image.Style>
                                </Image>
                                <TextBlock Text="{Binding DisplayName}" VerticalAlignment="Center"/>
                            </StackPanel>
                        </Button.Content>
                    </Button>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
        </ScrollViewer>
    </DataTemplate>

    <Style x:Key="NewSideMenuButton" TargetType="{x:Type Button}">
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="15, 10, 15, 10"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Left" VerticalAlignment="Center" Margin="{TemplateBinding Padding}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="FloralWhite"/>
                <Setter Property="Foreground" Value="Black"/>
            </Trigger>
        </Style.Triggers>
    </Style>


    <!-- 
  This template explains how to render 
  a tab item with a close button.
  -->
    <DataTemplate x:Key="ClosableTabItemTemplate">
        <DockPanel Width="120">
            <Button 
        Command="{Binding Path=CloseCommand}"
        Content="X"
        Cursor="Hand"
        DockPanel.Dock="Right"
        Focusable="False"
        FontFamily="Courier" 
        FontSize="9"
        FontWeight="Bold"  
        Margin="0,1,0,0"
        Padding="0"
        VerticalContentAlignment="Bottom"
        Width="16" Height="16" 
        />
            <ContentPresenter 
        Content="{Binding Path=DisplayName}" 
        VerticalAlignment="Center" 
        />
        </DockPanel>
    </DataTemplate>

    <!--
  This template explains how to render the 'Workspace' content area in the main window.
  -->
    <DataTemplate x:Key="WorkspacesTemplate">
        <TabControl 
      IsSynchronizedWithCurrentItem="True" 
      ItemsSource="{Binding}" 
      ItemTemplate="{StaticResource ClosableTabItemTemplate}"
      Margin="4"
      />
    </DataTemplate>

    <Style x:Key="MenuBarStyle" TargetType="{x:Type Menu}">
        <Setter Property="Background" Value="#242424"/>
        <Setter Property="Foreground" Value="#efefef"/>
    </Style>

    <Style x:Key="MenuLogoStyle" TargetType="{x:Type MenuItem}">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="3,3,3,3"/>
        <Setter Property="Height" Value="20"/>
    </Style>
    
    <Style x:Key="MenuItemStyle" TargetType="{x:Type MenuItem}">
        <Setter Property="Background" Value="#242424"/>
        <Setter Property="Foreground" Value="#efefef"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="0,3,0,3"/>
        <Setter Property="Height" Value="20"/>
    </Style>
    
    <Style x:Key="MenuInternalItemStyle" TargetType="{x:Type MenuItem}">
        <Setter Property="Background" Value="#efefef"/>
        <Setter Property="Foreground" Value="#242424"/>
    </Style>

    <Style x:Key="ToolBarStyle" TargetType="{x:Type ToolBar}">
        <Setter Property="Background" Value="#242424"/>
        <Setter Property="Foreground" Value="#efefef"/>
    </Style>

    <Style x:Key="ToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="#242424"/>
        <Setter Property="Foreground" Value="#efefef"/>
        <Setter Property="Width" Value="32"/>
        <Setter Property="Height" Value="32"/>
        <!--<Setter Property="Margin" Value="2"/>-->
    </Style>

    <Style x:Key="StatusBarStyle" TargetType="{x:Type StatusBar}">
        <Setter Property="Background" Value="#242424"/>
        <Setter Property="Foreground" Value="#efefef"/>
        <Setter Property="Padding" Value="10,0,10,0"/>
    </Style>

    <Style x:Key="LadowanieMagazynuStyle" TargetType="ProgressBar">
        <Setter Property="Width" Value="100"/>
        <Setter Property="Height" Value="28"/>
        <Setter Property="Margin" Value="2"/>
    </Style>

    <Style TargetType="Ribbon">
        <Setter Property="Background" Value="#242424"/>
        <Setter Property="Foreground" Value="#EFEFEF"/>
        <Setter Property="BorderBrush" Value="#FFDEDEDE"/>
        <Setter Property="CheckedBackground" Value="#FF4C4C4C"/>
        <Setter Property="CheckedBorderBrush" Value="DarkGray"/>
        <Setter Property="FocusedBackground" Value="#FF242424"/>
        <Setter Property="FocusedBorderBrush" Value="#EFEFEF"/>
        <Setter Property="MouseOverBackground" Value="#FFEFEFEF"/>
        <Setter Property="MouseOverBorderBrush" Value="Gainsboro"/>
        <Setter Property="PressedBackground" Value="Gainsboro"/>
        <Setter Property="PressedBorderBrush" Value="#FFC8C8C8"/>
    </Style>
    <Style TargetType="RibbonTabHeader">
        <Setter Property="Foreground" Value="#EFEFEF"/>
        <Style.Triggers>
            <Trigger Property="IsRibbonTabSelected" Value="True">
                <Setter Property="Foreground" Value="#242424"/>
                <Setter Property="Background" Value="#EFEFEF"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="RibbonTab">
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Foreground" Value="#242424"/>
                <Setter Property="BorderBrush" Value="#242424"/>
                <Setter Property="Background" Value="#EFEFEF"/>
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="Foreground" Value="#242424"/>
                <Setter Property="Background" Value="#EFEFEF"/>
            </Trigger>
            <Trigger Property="IsVisible" Value="True">
                <Setter Property="Foreground" Value="#242424"/>
                <Setter Property="Background" Value="#EFEFEF"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
</ResourceDictionary>